install.packages("KernSmooth")
library(KernSmooth)
x <- c(1,2,NA,4,BA,5)
x <- c(1,2,NA,4,NA,5)
y<-("a","b",NA,"d",NA,"f")
y<-c("a","b",NA,"d",NA,"f")
good <- complete.cases(x,y)
x[good]
x <- list(2,"a","b",TRUE)
x[[1]]
drop x
clear
a <- 1:4
b <- 2
a+b
q <- c(17, 14, 4, 5, 13, 12, 10)
q[q > 10] == 4
x[x >= 11] <- 4
q[q >= 11] <- 4
q
x <- c(rnorm(10), runif(10), rnorm(10,1))
x
a <- gl(2,1,20)
a
b <- gl(2,8)
b
c<-gl(2,2,16)
c
x <- c(4, "a", TRUE)?
?
!
x <- c(4, "a", TRUE)
x <- c(4, "a", TRUE)
x <- list(2, "a", "b", TRUE)
x[[2]]
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <-10
f(3)
x <- 4L
display x
class x
class(x)
x <- c(4, "a", TRUE)
x <- c(1,3, 5)
y <- c(3, 2, 10)
cbind(x,y)
x <- list(2, "a", "b", TRUE)
x[[2]]
x[2]
x <- c(3, 5, 1, 10, 12, 6)
x[x < 6] <- 0
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
display y
display(y)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
read.table("001")
read.table("001.txt")
read.table("001.csv")
read.table("/Users/dannychan0510/Google Drive/3. My Resources/Coursera/Data Science Specialization/2. R Programming/Week 2/Assignment/specdata/001.csv")
test <- read.table("/Users/dannychan0510/Google Drive/3. My Resources/Coursera/Data Science Specialization/2. R Programming/Week 2/Assignment/specdata")
test <- read.table("/Users/dannychan0510/Google Drive/3. My Resources/Coursera/Data Science Specialization/2. R Programming/Week 2/Assignment/specdata/001.csv")
View(test)
test <- read.csv("/Users/dannychan0510/Google Drive/3. My Resources/Coursera/Data Science Specialization/2. R Programming/Week 2/Assignment/specdata/001.csv")
View(test)
files = list.files(pattern="*.csv")
display(files)
test2 <- read.csv("/Users/dannychan0510/Google Drive/3. My Resources/Coursera/Data Science Specialization/2. R Programming/Week 2/Assignment/specdata/002.csv")
test3 <- rbind(test, test2)
View(test3)
View(test3)
View(test3)
install.packages("RMySQL")
ucscDb <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
library(MySQL)
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb)
result
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
oauth_endpoints("github")
library(httr)
install.packages("httr")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "b061a9b10fa6b4bf1a8a")
?oauth_app
myapp <- oauth_app("Data Science Specialization: Getting and Cleaning Data", "b061a9b10fa6b4bf1a8a")
myapp <- oauth_app("Data Science Specialization: Getting and Cleaning Data", "b061a9b10fa6b4bf1a8a", secret = "4b54071b19d312871928e58d99eb037935aef324")
github_token <- oauth2.0_token(oauth_endpoints("Data Science Specialization: Getting and Cleaning Data"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "56b637a5baffac62cad9")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "b061a9b10fa6b4bf1a8a", "4b54071b19d312871928e58d99eb037935aef324")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
myapp <- oauth_app("github", "b061a9b10fa6b4bf1a8a", "4b54071b19d312871928e58d99eb037935aef324")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
myapp <- oauth_app("github", "b061a9b10fa6b4bf1a8a", "4b54071b19d312871928e58d99eb037935aef324")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
Cuwzq0r0github
myapp <- oauth_app("github", "b061a9b10fa6b4bf1a8a", "4b54071b19d312871928e58d99eb037935aef324")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
myapp <- oauth_app("github", "b061a9b10fa6b4bf1a8a", "4b54071b19d312871928e58d99eb037935aef324")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
stop_for_status(req)
content(req)
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
?oauth2.0_token
install.packages(c("jsonlite", "httpuv", "httr")
)
install.packages(c("jsonlite", "httpuv", "httr"))
library(c("jsonlite", "hyypuv", "httr"))
library("jsonlite")
library("httpuv")
library("httr")
library("jsonlite")
library("httpuv")
library("httr")
myapp <- oauth_app("coursera", "b061a9b10fa6b4bf1a8a", "4b54071b19d312871928e58d99eb037935aef324")
github_token <- oauth2.0_token(oauth_endpoints("coursera"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
myapp <- oauth_app("coursera", "b061a9b10fa6b4bf1a8a", "4b54071b19d312871928e58d99eb037935aef324")
github_token <- oauth2.0_token(oauth_endpoints("coursera"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
content(req)
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
myapp <- oauth_app("coursera", "b061a9b10fa6b4bf1a8a", "4b54071b19d312871928e58d99eb037935aef324")
github_token <- oauth2.0_token(oauth_endpoints("coursera"), myapp)
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
myapp <- oauth_app("coursera", "b061a9b10fa6b4bf1a8a", "4b54071b19d312871928e58d99eb037935aef324")
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
install.packages(c("jsonlite", "httpuv", "httr"))
library("jsonlite")
library("httpuv")
library("httr")
myapp <- oauth_app("coursera", "b061a9b10fa6b4bf1a8a", "4b54071b19d312871928e58d99eb037935aef324")
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
setwd("~/Google Drive/3. My Resources/Coursera/Data Science Specialization/3. Getting and Cleaning Data/Quizes/Week 2")
install.packages("sqldf")
library("sqldf")
acs <- read.csv("./getdata-data-ss06pid.csv", headers = TRUE)
acs <- read.csv("./getdata-data-ss06pid.csv", header = TRUE)
View(acs)
View(acs)
acs.ss <- sqldf("select pwgtp1 from acs where AGEP < 50")
View(acs.ss)
sqldf("select distinct AGEP from acs")
sqldf("select unique AGEP from acs")
sqldf("select pwgtp1 from acs where AGEP < 50")
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
print(con)
?readLines
htmlCode <- realLines(con)
htmlCode <- readLines(con)
print(htmlCode)
?nchar
nchar(htmlCode[180, ])
nchar(htmlCode[180, 1])
nchar(htmlCode[, 180])
nchar(htmlCode[1, 180])
nchar(htmlCode)
nchar(htmlCode[1])
nchar(htmlCode[180])
nchar[htmlCode[c(10, 20, 30, 100)]]
nchar(htmlCode[c(10, 20, 30, 100)])
q5 <- readLines(./getdata-wksst8110.for)
q5 <- readLines("./getdata-wksst8110.for")
str(q5)
print(q5)
?data.table
?data.table
library(data.table)
?data.table
?read.fwf
q5 <- read.fwf("./getdata-wksst8110.for", width = c(10, 9, 4, 9 , 4, 9, 4, 9, 5), skip = 4)
View(`q5`)
q5 <- read.fwf("./getdata-wksst8110.for", width = c(10, 9, 4, 9 , 4, 9, 4, 9, 5), skip = 4, header = TRUE)
q5 <- read.fwf("./getdata-wksst8110.for", width = c(10, 9, 4, 9 , 4, 9, 4, 9, 5), skip = 4)
colSums(q5$V4)
colSums(q5)
q5$V4 <- as.numeric(q5$V4)
sum(q5$V4)
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
print(con)
htmlCode <- readLines(con)
nchar(htmlCode[c(10, 20, 30, 100)])
setwd("~/Documents/GitHub/coursera-datascience-getting-and-cleaning-data-course-project")
read.table("./X_train.txt")
X_train <- read.table("./UNI HAR Dataset/train/X_train.txt")
X_train <- read.table("./UCI HAR Dataset/train/X_train.txt")
X_train <- read.table("./UCI HAR Dataset/train/X_train.txt")
View(X_train)
subject_train <- read.table("./UCI HAR Dataset/train/subject_train.txt")
Y_train <- read.table("./UCI HAR Dataset/train/Y_train.txt")
subject_test <- read.table("./UCI HAR Dataset/test/subject_test.txt")
X_test <- read.table("./UCI HAR Dataset/test/X_test.txt")
Y_test <- read.table("./UCI HAR Dataset/test/Y_test.txt")
features <- read.table("./UCI HAR Dataset/features.txt")
features
activity_labels <- read.table("./UCI HAR Dataset/activity_labels.txt")
View(activity_labels)
View(subject_test)
View(subject_train)
unique(subject_test)
unique(subject_train)
class(X_test)
library(data.table)
?setnames
setnames(X_test, 1:561, features)
View(features)
names(X_train)
names(X_train) <- features[, 2]
names(X_train)
View(features)
names(X_test) <- features[, 2]
View(subject_test)
names(subject_train) <- "subject"
View(subject_test)
View(subject_train)
names(subject_train) <- "subject"
View(subject_train)
View(subject_test)
names(subject_test) <- "subject"
View(subject_test)
View(Y_test)
View(Y_train)
unique(Y_train)
unique(Y_test)
View(activity_labels)
names(Y_test) <- "activity"
names(Y_train) <- "activity"
test <- data.table(subject_test, Y_test, subject_test)
View(test)
test <- data.table(subject_test, Y_test, X_test)
View(test)
train <- data.table(subject_train, Y_train, X_train)
fulldata <- rbind(test, train)
2947 + 7352
View(fulldata)
names(fulldata)
test <- names(fulldata)
grepl("mean()", test)
sum(grepl("mean()", test))
sum(grepl("std()", test))
testw <- grepl("mean()", test))+grepl("std()", test))
testw <- grepl("mean()", test)+grepl("std()", test))
testw <- grepl("mean()", test)+grepl("std()", test)
fulldata.ss[test2]
fulldata.ss<- fulldata[test2]
fulldata.ss<- fulldata[, test2]
fulldata.ss<- fulldata[testw]
View(fulldata.ss)
View(fulldata)
testw
testw <- grepl("mean()", test)
testw <- as.logical(grepl("mean()", test)+grepl("std()", test))
fulldata.ss<- fulldata[testw]
View(fulldata.ss)
fulldata.ss<- fulldata[, testw]
a-test1
?norm
?rnorm
a-test1 <- rnorm(10)
a-test1 <- rnorm(10)
a_test1 <- rnorm(10)
a_test2 <- rnorm(10)
a_test2 <- rnorm(10)
data.frame(a_test1, a_test2, a_test3, b_test1, b_test2, b_test3, c_test1, c_test2, c_test3)
a_test1 <- rnorm(10)
a_test2 <- rnorm(10)
a_test3 <- rnorm(10)
b_test1 <- rnorm(10)
b_test2 <- rnorm(10)
b_test3 <- rnorm(10)
c_test1 <- rnorm(10)
c_test2 <- rnorm(10)
c_test3 <- rnorm(10)
data.frame(a_test1, a_test2, a_test3, b_test1, b_test2, b_test3, c_test1, c_test2, c_test3)
dataset <- data.frame(a_test1, a_test2, a_test3, b_test1, b_test2, b_test3, c_test1, c_test2, c_test3)
a_test1 <- rnorm(10)
a_test2 <- rnorm(10)
a_test3 <- rnorm(10)
b_test1 <- rnorm(10)
b_test2 <- rnorm(10)
b_test3 <- rnorm(10)
c_test1 <- rnorm(10)
c_test2 <- rnorm(10)
c_test3 <- rnorm(10)
dataset <- data.frame(a_test1, a_test2, a_test3, b_test1, b_test2, b_test3, c_test1, c_test2, c_test3)
dataset
a_test1 <- rnorm(10)
a_test2 <- rnorm(10)
a_test3 <- rnorm(10)
b_test1 <- rnorm(10)
b_test2 <- rnorm(10)
b_test3 <- rnorm(10)
c_test1 <- rnorm(10)
c_test2 <- rnorm(10)
c_test3 <- rnorm(10)
dataset <- data.frame(a_test1, a_test2, a_test3, b_test1, b_test2, b_test3, c_test1, c_test2, c_test3)
print(dataset)
a_test1 <- rnorm(10)
a_test2 <- rnorm(10)
a_test3 <- rnorm(10)
a_test4 <- rnorm(10)
b_test1 <- rnorm(10)
b_test2 <- rnorm(10)
b_test3 <- rnorm(10)
c_test1 <- rnorm(10)
c_test2 <- rnorm(10)
c_test3 <- rnorm(10)
dataset <- data.frame(a_test1, a_test2, a_test3, a_test4, b_test1, b_test2, b_test3, c_test1, c_test2, c_test3)
print(dataset)
criteria <- as.logical(grepl("test2", dataset) + grepl("test3", dataset))
criteria
grepl("test2", dataset)
grepl("test2", dataset, perl = TRUE)
grepl("test2", dataset, fixed = TRUE)
names <- names(dataset)
criteria <- as.logical(grepl("test2", names) + grepl("test3", names))
names
criteria
dataset[, criteria]
fulldata.ss<- fulldata[, test2]
testw <- (grepl("mean()", test)+grepl("std()", test))
fulldata.ss<- fulldata[, testw]
fulldata.ss <- as.data.frame(fulldata[, testw])
View(fulldata.ss)
dataser.ss <- dataset[, criteria]
View(dataser.ss)
testw <- as.logical(grepl("mean()", test) + grepl("std()", test))
fulldata.ss <- as.data.frame(fulldata[, testw])
View(fulldata.ss)
class(dataset)
class(fulldata)
class(fulldata)
fulldata <- as.data.fram(rbind(test, train))
fulldata <- as.data.frame(rbind(test, train))
test <- data.frame(subject_test, Y_test, X_test)
train <- data.frame(subject_train, Y_train, X_train)
# merges test and train data tables to form one data table
fulldata <- as.data.frame(rbind(test, train))
# extracts only the mean and sd for each measurement
test <- names(fulldata)
testw <- as.logical(grepl("mean()", test) + grepl("std()", test))
fulldata.ss <- as.data.frame(fulldata[, testw])
View(dataser.ss)
View(fulldata.ss)
